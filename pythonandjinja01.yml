---
- name: A Play to play with Python
  hosts: localhost

  vars:
    test_list:
      - '192.168.2.1'
      - '10.10.0.2'
      - 'host.example.org'
      - '192.168.70.0/24'
      - 'fe80::100/10'
      - 'True'
      - 'Witcher 3: The Wild Hunt'
      - 'Earl Grey Tea, hot'
    mytest_string: "NCC1701 USS Enterprise"
    myaddresses: ['192.168.2.101', '10.0.3.50', '171.172.32.1']

  tasks:
  # the next task will require the netaddr package be installed on Python
  - name: Install netaddr
    pip:
      name: netaddr
      
  # Use the Jinja ipaddr filter to reveal JUST IPs from a mixed list.
  - name: Just want the IPs
    debug:
      msg: "{{ test_list | ipaddr }}"

  # Use the Jinja random_mac filter to finish a MAC address.
  - name: Spawn rando mac
    debug:
      msg: "{{'52:54:00' | random_mac }}"

  # When using the var statement, Ansible would prefer you did NOT use mustache brackets
  - name: Some don't need mustache brackets
    debug:
      var: "'52:54:11'|random_mac"
  # FYI - The no mustache brackets rule also applies to when statements
  # when: never use {{    }} in when statements

  # Here is an example of using a Python method to parse our data
  # This method returns a bool (true/false)
  - name: Test if our string ends in prise
    debug:
      msg: "{{ mytest_string.endswith('prise') }}"
      
  # Building a conditional around our task-
  # this will only print if our string ends in prise
  - name: This only prints when this tests true using python
    debug:
      msg: "Ahh, but is it the Enterprise subclass A, B, C, or D?"
    when: mytest_string.endswith('prise')

  # Sometimes a Jinja filter seems like more work to learn than just using a Python method
  - name: Jinja2 way of capitalizing a string
    debug:
      msg: "{{ mytest_string | capitalize }}"

  # Same example, only we use a Python method, not a Jinja2 filter
  # notice how Python methods use dot notation and Jinja uses pipes
  - name: Python way of capitalizing a string
    debug:
      msg: "{{ mytest_string.capitalize() }}"

  # Sometimes we need to use Python AND Jinja.
  # ipaddr returns all addresses that match the scope.
  # The square brackets selects the only item in the list.
  # We split the IP address into a list containing 4 items (each item is an octet).
  # We then select the 3rd item (4th in the list) and display it to the screen
  - name: Pop the number 50 on the screen
    debug:
      msg: "{{ (myaddresses|ipaddr('10.0.0.0/8'))[0].split('.')[3] }}"

